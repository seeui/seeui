{"version":3,"names":[],"mappings":"","sources":["dialog/Dialog.js"],"sourcesContent":["/**\n * @file Dialog\n * @author zhaiwanli\n * @time 17/7/5\n */\n\nimport {h, Component} from 'preact';\nimport classNames from '../util/classnames';\nimport {hasClass} from '../util/dom';\nimport {map} from '../util/lang';\n\nimport Button from '../button/Button';\nimport Icon from '../icon/Icon';\n\nimport Singleton from '../util/Singleton';\n\n\nexport default class Dialog extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        show: false,\n        hasClose: true,\n        maskClickClose: false,\n        buttons: []\n    };\n\n    constructor(props) {\n        super(props);\n\n        // 是否是父组件通过props控制组件显示隐藏\n        // 触发onShow onHide回调时是否通知父组件更新props中的显示隐藏状态\n        // true: 是父组件设置状态，不再触发状态更新   false: 组件内部设置状态，需要触发状态更新\n        // 应用场景：父组件设置显示隐藏，回调时不再要求重置父组件状态\n        this.propsUpdateShow = false;\n    }\n\n    /**\n     * 父级修改属性\n     *\n     * @private\n     * @param {Object} nextProps 更改后的属性值\n     */\n    componentWillReceiveProps(nextProps) {\n        let show = nextProps.show;\n\n        if (show === this.props.show) {\n            this.propsUpdateShow = true;\n        }\n    }\n\n    onMaskClick(e) {\n        const {prefixCls, maskClickClose, onHide} = this.props;\n        if (maskClickClose && hasClass(e.target, `${prefixCls}-dialog`)) {\n            onHide && onHide({type: 'maskClick'});\n        }\n        else {\n            e.stopPropagation();\n        }\n    }\n\n    // 初始化完成，如果show，则触发onShow事件，初始化hide，不用触发onHide事件\n    componentDidMount() {\n        let {show, onShow} = this.props;\n\n        show && onShow && onShow();\n    }\n\n    // 状态更新后，可能是props改变，也可能是state改变触发的\n    componentDidUpdate() {\n        const {show, onShow, onHide} = this.props;\n\n        if (this.propsUpdateShow) {\n            this.propsUpdateShow = false;\n            return;\n        }\n\n        this.propsUpdateShow = false;\n\n        if (show) {\n            onShow && onShow();\n        }\n        else {\n            onHide && onHide();\n        }\n    }\n\n    // 销毁前如果状态是显示，则需要考虑解锁屏幕\n    componentWillUnmount() {\n        const {show, onDestroy} = this.props;\n        show && onDestroy && onDestroy();\n    }\n\n    /**\n     * 渲染浮层头部\n     *\n     * @private\n     * @return {XML}\n     */\n    renderTitle() {\n        const {prefixCls, title} = this.props;\n\n        return (\n            <h3 className={`${prefixCls}-dialog-header`}>{title}</h3>\n        );\n    }\n\n    /**\n     * 渲染关闭按钮\n     *\n     * @private\n     * @return {XML}\n     */\n    renderClose() {\n        const {prefixCls, closeContent, onHide} = this.props;\n\n        return (\n            <span\n                onClick={e => onHide({type: 'closeClick'})}\n                className={`${prefixCls}-dialog-close`}\n            >\n                {closeContent ? closeContent : <Icon type=\"close\" />}\n            </span>\n        );\n    }\n\n    /**\n     * 渲染底部button\n     *\n     * @private\n     * @return {XML}\n     */\n    renderFooter() {\n        const {prefixCls, buttons} = this.props;\n\n        let btnsDom = map(buttons, button => {\n            const {type = 'default', value, size = 'large', ...others} = button;\n\n            return (\n                <div className={`${prefixCls}-dialog-footer-item`}>\n                    <Button type={type} size={size} {...others}>\n                        {value}\n                    </Button>\n                </div>\n            );\n        });\n\n        return (\n            <div className={`${prefixCls}-dialog-footer`}>\n                {btnsDom}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            prefixCls,\n            className,\n            show,\n            width,\n            top,\n            children,\n            hasClose,\n            title,\n            buttons,\n            maskClickClose,\n            ...others\n        } = this.props;\n\n        const dialogCls = classNames({\n            [`${prefixCls}-dialog`]: true,\n            'show': show,\n            [className]: className\n        });\n\n        const dialogWrapCls = classNames({\n            [`${prefixCls}-dialog-wrap`]: true,\n            'vertical-middle': (top == null)\n        });\n\n        const dialogStyle = ''\n            + (width ? `width:${width};` : '')\n            + (top != null ? `top:${top}` : '');\n\n        return (\n            <div className={dialogCls} {...others} onClick={e => maskClickClose && this.onMaskClick(e)}>\n                <div className={dialogWrapCls} style={dialogStyle}>\n                    {title ? this.renderTitle() : null}\n                    {hasClose ? this.renderClose() : null}\n                    <div className={`${prefixCls}-dialog-body`}>\n                        {children}\n                    </div>\n                    {buttons && buttons.length ? this.renderFooter() : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport const SingleDialog = new Singleton(Dialog);\n"],"file":"Dialog.js"}