{"version":3,"sources":["dialog/Dialog.js"],"names":["Dialog","props","propsUpdateShow","componentWillReceiveProps","nextProps","show","toggleLockWindow","lock","onMaskClick","e","prefixCls","maskClickClose","onHide","target","type","stopPropagation","componentDidMount","onShow","componentDidUpdate","componentWillUnmount","renderTitle","title","renderClose","closeContent","renderFooter","buttons","btnsDom","map","button","value","size","others","render","className","width","top","children","hasClose","dialogCls","dialogWrapCls","dialogStyle","length","defaultProps"],"mappings":"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","file":"Dialog.js","sourcesContent":["/**\n * @file Dialog\n * @author zhaiwanli\n * @time 17/7/5\n */\n\nimport {h, Component} from 'preact';\nimport classNames from '../util/classnames';\nimport {hasClass} from '../util/dom';\nimport Button from '../button/Button';\n\n\nexport default class Dialog extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        show: false,\n        hasClose: true,\n        maskClickClose: false,\n        buttons: []\n    };\n\n    constructor(props) {\n        super(props);\n\n        // 是否是父组件通过props控制组件显示隐藏\n        // 触发onShow onHide回调时是否通知父组件更新props中的显示隐藏状态\n        // true: 是父组件设置状态，不再触发状态更新   false: 组件内部设置状态，需要触发状态更新\n        // 应用场景：父组件设置显示隐藏，回调时不再要求重置父组件状态\n        this.propsUpdateShow = false;\n    }\n\n    /**\n     * 父级修改属性\n     *\n     * @private\n     * @param {Object} nextProps 更改后的属性值\n     */\n    componentWillReceiveProps(nextProps) {\n        let show = nextProps.show;\n\n        if (show === this.props.show) {\n            this.propsUpdateShow = true;\n        }\n    }\n\n    toggleLockWindow(lock) {\n        // lock ? lockWindow() : unLockWindow();\n    }\n\n    onMaskClick(e) {\n        const {prefixCls, maskClickClose, onHide} = this.props;\n        if (maskClickClose && hasClass(e.target, `${prefixCls}-dialog`)) {\n            onHide && onHide({type: 'maskClick'});\n        }\n        else {\n            e.stopPropagation();\n        }\n    }\n\n    // 初始化完成，如果show，则触发onShow事件，初始化hide，不用触发onHide事件\n    componentDidMount() {\n        let {show, onShow} = this.props;\n\n        // show && this.toggleLockWindow(true) && onShow && onShow();\n        show && onShow && onShow();\n    }\n\n    // 状态更新后，可能是props改变，也可能是state改变触发的\n    componentDidUpdate() {\n        const {show, onShow, onHide} = this.props;\n\n        if (this.propsUpdateShow) {\n            this.propsUpdateShow = false;\n            return;\n        }\n\n        this.propsUpdateShow = false;\n\n        if (show) {\n            // this.toggleLockWindow(true);\n            onShow && onShow();\n        }\n        else {\n            // this.toggleLockWindow(false);\n            onHide && onHide();\n        }\n    }\n\n    // 销毁前如果状态是显示，则需要考虑解锁屏幕\n    componentWillUnmount() {\n        // this.props.show && this.toggleLockWindow(false);\n    }\n\n    /**\n     * 渲染浮层头部\n     *\n     * @private\n     * @return {XML}\n     */\n    renderTitle() {\n        const {prefixCls, title} = this.props;\n\n        return (\n            <h3 className={`${prefixCls}-dialog-header`}>{title}</h3>\n        );\n    }\n\n    /**\n     * 渲染关闭按钮\n     *\n     * @private\n     * @return {XML}\n     */\n    renderClose() {\n        const {prefixCls, closeContent, onHide} = this.props;\n\n        return (\n            <span\n                onClick={e => onHide({type: 'closeClick'})}\n                className={`${prefixCls}-dialog-close`}\n            >\n                {closeContent ? closeContent : '×'}\n            </span>\n        );\n    }\n\n    /**\n     * 渲染底部button\n     *\n     * @private\n     * @return {XML}\n     */\n    renderFooter() {\n        const {prefixCls, buttons} = this.props;\n\n        let btnsDom = buttons.map(button => {\n            const {type = 'default', value, size = 'large', ...others} = button;\n\n            return (\n                <div className={`${prefixCls}-dialog-footer-item`}>\n                    <Button type={type} size={size} {...others}>\n                        {value}\n                    </Button>\n                </div>\n            );\n        });\n\n        return (\n            <div className={`${prefixCls}-dialog-footer`}>\n                {btnsDom}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            prefixCls,\n            className,\n            show,\n            width,\n            top,\n            children,\n            hasClose,\n            title,\n            buttons,\n            maskClickClose,\n            ...others\n        } = this.props;\n\n        const dialogCls = classNames({\n            [`${prefixCls}-dialog`]: true,\n            'show': show,\n            [className]: className\n        });\n\n        const dialogWrapCls = classNames({\n            [`${prefixCls}-dialog-wrap`]: true,\n            'vertical-middle': (top == null)\n        });\n\n        const dialogStyle = ''\n            + (width ? `width:${width};` : '')\n            + (top != null ? `top:${top}` : '');\n\n        return (\n            <div className={dialogCls} {...others} onClick={e => maskClickClose && this.onMaskClick(e)}>\n                <div className={dialogWrapCls} style={dialogStyle}>\n                    {title ? this.renderTitle() : null}\n                    {hasClose ? this.renderClose() : null}\n                    <div className={`${prefixCls}-dialog-body`}>\n                        {children}\n                    </div>\n                    {buttons && buttons.length ? this.renderFooter() : null}\n                </div>\n            </div>\n        );\n    }\n}\n"]}