{"version":3,"sources":["util/dom.js"],"names":["getStyle","setStyle","show","hide","addClass","removeClass","toggleClass","hasClass","position","setData","getData","removeData","g","query","queryAll","matches","children","closest","getComputedStyle","document","defaultView","camelize","target","replace","match","chr","toUpperCase","detectEle","createElement","prefixes","detectProperty","property","charAt","style","name","substring","i","prefix","element","getPropertyValue","value","exports","display","className","classList","add","classes","split","n","length","push","join","remove","splice","isForce","contains","offsetEle","res","pos","getBoundingClientRect","fixPos","left","top","Math","max","documentElement","scrollLeft","body","scrollTop","attrPrefix","key","setAttribute","getAttribute","removeAttribute","id","getElementById","selector","context","querySelector","Array","isArray","nodeList","querySelectorAll","prototype","slice","call","proto","Element","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","elements","parentNode","items","item","nodeType"],"mappings":"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","file":"babelHelpers.js","sourcesContent":["/**\n * @file dom\n * https://github.com/ecomfe/saber-dom\n * @author wuqi03(441984145@qq.com)\n * @time 17/6/12\n */\n\n// ****************************************************\n// *                      css                         *\n// ****************************************************\nlet getComputedStyle = document.defaultView.getComputedStyle;\n\n/**\n * 将CSS属性驼峰化\n *\n * @param {string} target 目标字符串\n * @return {string}\n */\nfunction camelize(target) {\n    return target.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n    });\n}\n\nlet detectEle = document.createElement('div');\nlet prefixes = ['webkit', 'ms', 'o'];\n\n/**\n * 检测支持的CSS属性名称\n * 如果没有找到支持的属性名称返回原有值\n *\n * @inner\n * @param {string} property CSS属性名\n * @return {string}\n */\nfunction detectProperty(property) {\n    if (property.charAt(0) !== '-') {\n        let style = detectEle.style;\n        let name = camelize(property);\n\n        if (!(name in style)) {\n            name = name.charAt(0).toUpperCase() + name.substring(1);\n\n            for (let i = 0, prefix; prefix = prefixes[i]; i++) { // jshint ignore:line\n                if (prefix + name in style) {\n                    property = '-' + prefix + '-' + property;\n                    break;\n                }\n            }\n        }\n    }\n    return property;\n}\n\n/**\n * 获取样式\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} property 属性\n * @return {string|null}\n */\nexport function getStyle(element, property) {\n    property = detectProperty(property);\n    return element.style[camelize(property)]\n        || getComputedStyle(element).getPropertyValue(property);\n}\n\n/**\n * 设置样式\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} property 属性\n * @param {string} value 值\n */\nexport function setStyle(element, property, value) {\n    property = detectProperty(property);\n    element.style[camelize(property)] = value;\n}\n\n/**\n * 显示DOM元素\n *\n * @param {HTMLElement} element 目标元素\n */\nexport function show(element) {\n    if (exports.getStyle(element, 'display') === 'none') {\n        element.style.display = null;\n    }\n}\n\n/**\n * 隐藏DOM元素\n *\n * @param {HTMLElement} element 目标元素\n */\nexport function hide(element) {\n    element.style.display = 'none';\n}\n\n/**\n * 为目标元素添加className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要添加的className\n *\n * @return {HTMLElement} 目标元素\n */\nexport function addClass(element, className) {\n    // 优先使用classList. 在iOS 5, Android 3 之后开始支持\n    if (element.classList) {\n        element.classList.add(className);\n    }\n    else {\n        let classes = element.className\n            ? element.className.split(/\\s+/) : [];\n\n        for (let i = 0, n = classes.length; i < n; i++) {\n            if (classes[i] === className) {\n                return element;\n            }\n        }\n\n        classes.push(className);\n        element.className = classes.join(' ');\n    }\n\n    return element;\n}\n\n/**\n * 移除目标元素的className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要移除的className\n *\n * @return {HTMLElement} 目标元素\n */\nexport function removeClass(element, className) {\n    if (element.classList) {\n        element.classList.remove(className);\n    }\n    else {\n        let classes = element.className\n            ? element.className.split(/\\s+/) : [];\n\n        for (let i = 0, n = classes.length; i < n; i++) {\n            if (classes[i] === className) {\n                classes.splice(i, 1);\n                i--;\n            }\n        }\n        element.className = classes.join(' ');\n    }\n\n    return element;\n}\n\n/**\n * 反转目标元素的className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要反转的className\n * @param {boolean=} isForce 强制指定添加或移除, 传入`true`则添加, 反之则移除\n *\n * @return {HTMLElement} 目标元素\n */\nexport function toggleClass(element, className, isForce) {\n    isForce = 'boolean' === typeof isForce\n        ? isForce\n        : !exports.hasClass(element, className);\n\n    exports[isForce ? 'addClass' : 'removeClass'](element, className);\n\n    return element;\n}\n\n/**\n * 判断元素是否拥有指定的className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要判断的className\n *\n * @return {boolean} 是否拥有指定的className\n */\nexport function hasClass(element, className) {\n    // 方法名用 hasClass，是因为 contains 在 dom 模块中可能引起歧义\n    if (element.classList) {\n        return element.classList.contains(className);\n    }\n\n    let classes = element.className.split(/\\s+/);\n    for (let i = 0, n = classes.length; i < n; i++) {\n        if (classes[i] === className) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * 获取元素的相对位置\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {HTMLElement=} offsetEle 相对元素\n * @return {Object}\n */\nexport function position(element, offsetEle) {\n    let res = {};\n    let pos = element.getBoundingClientRect();\n\n    if (offsetEle) {\n        let fixPos = offsetEle.getBoundingClientRect();\n        res.left = pos.left - fixPos.left;\n        res.top = pos.top - fixPos.top;\n    }\n    else {\n        res.left = pos.left + Math.max(\n                document.documentElement.scrollLeft,\n                document.body.scrollLeft\n            );\n        res.top = pos.top + Math.max(\n                document.documentElement.scrollTop,\n                document.body.scrollTop\n            );\n    }\n\n    return res;\n}\n\n\n// ****************************************************\n// *                      data                        *\n// ****************************************************\nlet attrPrefix = 'data-';\n\n/**\n * 设置data的值\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} key data名\n * @param {string} value data值\n */\nexport function setData(element, key, value) {\n    element.setAttribute(attrPrefix + key, value);\n}\n\n/**\n * 获取data的值\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} key data名\n * @return {string|null} data值\n */\nexport function getData(element, key) {\n    return element.getAttribute(attrPrefix + key);\n}\n\n/**\n * 删除指定的data项\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} key data名\n */\nexport function removeData(element, key) {\n    element.removeAttribute(attrPrefix + key);\n}\n\n\n// ****************************************************\n// *                  selector                        *\n// ****************************************************\n\n/**\n * 根据id获取指定的DOM元素\n *\n * @public\n * @param {string|HTMLElement} id 元素的id或DOM元素\n * @return {HTMLElement|null} 获取的元素，找不到时返回null\n */\nexport function g(id) {\n    if (!id) {\n        return null;\n    }\n\n    return typeof id === 'string' ? document.getElementById(id) : id;\n}\n\n/**\n * 根据选择器获取指定DOM元素\n *\n * @public\n * @param {string} selector 元素的selector\n * @param {HTMLElement=} context 上下文\n * @return {HTMLElement|null} 获取的元素，找不到时返回null\n */\nexport function query(selector, context) {\n    if ('string' !== typeof selector) {\n        return selector;\n    }\n\n    context = context || document.body;\n\n    return context.querySelector(selector);\n}\n\n/**\n * 根据选择器选择DOM元素列表\n *\n * @public\n * @param {string} selector 元素的selector\n * @param {HTMLElement=} context 上下文\n * @return {Array} 获取的元素列表，找不到时为空数组\n */\nexport function queryAll(selector, context) {\n    if (Array.isArray(selector)) {\n        return selector;\n    }\n\n    context = context || document.body;\n\n    let nodeList = context.querySelectorAll(selector);\n\n    return Array.prototype.slice.call(nodeList);\n}\n\n/**\n * 判断DOM元素与选择器是否匹配\n *\n * @param {HTMLElement} element 目标DOM元素\n * @param {string} selector 待判断的selector\n * @return {boolean} 是否匹配\n */\nexport function matches(element, selector) {\n    let proto = Element.prototype;\n    let matches = proto.matches\n        || proto.webkitMatchesSelector\n        || proto.mozMatchesSelector\n        || proto.msMatchesSelector;\n\n    if (matches) {\n        return matches.call(element, selector);\n    }\n\n    let elements = exports.queryAll(selector, element.parentNode);\n    for (let i = 0; i < elements.length; i++) {\n        if (elements[i] === element) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n// ****************************************************\n// *                  traversal                       *\n// ****************************************************\n\n/**\n * 获取元素的子节点\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @return {Array.<HTMLElement>} 子节点\n */\nexport function children(element) {\n    let res = [];\n\n    let items = element.children;\n    for (let i = 0, item; item = items[i]; i++) { // jshint ignore:line\n        if (item.nodeType === 1) {\n            res.push(item);\n        }\n    }\n\n    return res;\n}\n\n/**\n * 查找第一个匹配条件的祖先元素\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} selector 查询条件\n * @param {HTMLElement=} context 遍历范围\n * @return {HTMLElement|null} 匹配到的节点，找不到时返回null\n */\nexport function closest(element, selector, context) {\n    context = context || document;\n\n    do {\n        if (matches(element, selector)) {\n            return element;\n        }\n\n        if (element === context) {\n            return null;\n        }\n    }\n    while ((element = element.parentNode) && element !== document);\n\n    return null;\n}\n"]}