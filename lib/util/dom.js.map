{"version":3,"names":[],"mappings":"","sources":["util/dom.js"],"sourcesContent":["/**\n * @file dom\n * https://github.com/ecomfe/saber-dom\n * @author wuqi03(441984145@qq.com)\n * @time 17/6/12\n */\n\n// ****************************************************\n// *                      css                         *\n// ****************************************************\nlet getComputedStyle = document.defaultView.getComputedStyle;\n\n/**\n * 将CSS属性驼峰化\n *\n * @param {string} target 目标字符串\n * @return {string}\n */\nfunction camelize(target) {\n    return target.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n    });\n}\n\nlet detectEle = document.createElement('div');\nlet prefixes = ['webkit', 'ms', 'o'];\n\n/**\n * 检测支持的CSS属性名称\n * 如果没有找到支持的属性名称返回原有值\n *\n * @inner\n * @param {string} property CSS属性名\n * @return {string}\n */\nfunction detectProperty(property) {\n    if (property.charAt(0) !== '-') {\n        let style = detectEle.style;\n        let name = camelize(property);\n\n        if (!(name in style)) {\n            name = name.charAt(0).toUpperCase() + name.substring(1);\n\n            for (let i = 0, prefix; prefix = prefixes[i]; i++) { // jshint ignore:line\n                if (prefix + name in style) {\n                    property = '-' + prefix + '-' + property;\n                    break;\n                }\n            }\n        }\n    }\n    return property;\n}\n\n/**\n * 获取样式\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} property 属性\n * @return {string|null}\n */\nexport function getStyle(element, property) {\n    property = detectProperty(property);\n    return element.style[camelize(property)]\n        || getComputedStyle(element).getPropertyValue(property);\n}\n\n/**\n * 设置样式\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} property 属性\n * @param {string} value 值\n */\nexport function setStyle(element, property, value) {\n    property = detectProperty(property);\n    element.style[camelize(property)] = value;\n}\n\n/**\n * 显示DOM元素\n *\n * @param {HTMLElement} element 目标元素\n */\nexport function show(element) {\n    if (exports.getStyle(element, 'display') === 'none') {\n        element.style.display = null;\n    }\n}\n\n/**\n * 隐藏DOM元素\n *\n * @param {HTMLElement} element 目标元素\n */\nexport function hide(element) {\n    element.style.display = 'none';\n}\n\n/**\n * 为目标元素添加className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要添加的className\n *\n * @return {HTMLElement} 目标元素\n */\nexport function addClass(element, className) {\n    // 优先使用classList. 在iOS 5, Android 3 之后开始支持\n    if (element.classList) {\n        element.classList.add(className);\n    }\n    else {\n        let classes = element.className\n            ? element.className.split(/\\s+/) : [];\n\n        for (let i = 0, n = classes.length; i < n; i++) {\n            if (classes[i] === className) {\n                return element;\n            }\n        }\n\n        classes.push(className);\n        element.className = classes.join(' ');\n    }\n\n    return element;\n}\n\n/**\n * 移除目标元素的className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要移除的className\n *\n * @return {HTMLElement} 目标元素\n */\nexport function removeClass(element, className) {\n    if (element.classList) {\n        element.classList.remove(className);\n    }\n    else {\n        let classes = element.className\n            ? element.className.split(/\\s+/) : [];\n\n        for (let i = 0, n = classes.length; i < n; i++) {\n            if (classes[i] === className) {\n                classes.splice(i, 1);\n                i--;\n            }\n        }\n        element.className = classes.join(' ');\n    }\n\n    return element;\n}\n\n/**\n * 反转目标元素的className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要反转的className\n * @param {boolean=} isForce 强制指定添加或移除, 传入`true`则添加, 反之则移除\n *\n * @return {HTMLElement} 目标元素\n */\nexport function toggleClass(element, className, isForce) {\n    isForce = 'boolean' === typeof isForce\n        ? isForce\n        : !exports.hasClass(element, className);\n\n    exports[isForce ? 'addClass' : 'removeClass'](element, className);\n\n    return element;\n}\n\n/**\n * 判断元素是否拥有指定的className\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {string} className 要判断的className\n *\n * @return {boolean} 是否拥有指定的className\n */\nexport function hasClass(element, className) {\n    // 方法名用 hasClass，是因为 contains 在 dom 模块中可能引起歧义\n    if (element.classList) {\n        return element.classList.contains(className);\n    }\n\n    let classes = element.className.split(/\\s+/);\n    for (let i = 0, n = classes.length; i < n; i++) {\n        if (classes[i] === className) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * 获取元素的相对位置\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @param {HTMLElement=} offsetEle 相对元素\n * @return {Object}\n */\nexport function position(element, offsetEle) {\n    let res = {};\n    let pos = element.getBoundingClientRect();\n\n    if (offsetEle) {\n        let fixPos = offsetEle.getBoundingClientRect();\n        res.left = pos.left - fixPos.left;\n        res.top = pos.top - fixPos.top;\n    }\n    else {\n        res.left = pos.left + Math.max(\n                document.documentElement.scrollLeft,\n                document.body.scrollLeft\n            );\n        res.top = pos.top + Math.max(\n                document.documentElement.scrollTop,\n                document.body.scrollTop\n            );\n    }\n\n    return res;\n}\n\n\n// ****************************************************\n// *                      data                        *\n// ****************************************************\nlet attrPrefix = 'data-';\n\n/**\n * 设置data的值\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} key data名\n * @param {string} value data值\n */\nexport function setData(element, key, value) {\n    element.setAttribute(attrPrefix + key, value);\n}\n\n/**\n * 获取data的值\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} key data名\n * @return {string|null} data值\n */\nexport function getData(element, key) {\n    return element.getAttribute(attrPrefix + key);\n}\n\n/**\n * 删除指定的data项\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} key data名\n */\nexport function removeData(element, key) {\n    element.removeAttribute(attrPrefix + key);\n}\n\n\n// ****************************************************\n// *                  selector                        *\n// ****************************************************\n\n/**\n * 根据id获取指定的DOM元素\n *\n * @public\n * @param {string|HTMLElement} id 元素的id或DOM元素\n * @return {HTMLElement|null} 获取的元素，找不到时返回null\n */\nexport function g(id) {\n    if (!id) {\n        return null;\n    }\n\n    return typeof id === 'string' ? document.getElementById(id) : id;\n}\n\n/**\n * 根据选择器获取指定DOM元素\n *\n * @public\n * @param {string} selector 元素的selector\n * @param {HTMLElement=} context 上下文\n * @return {HTMLElement|null} 获取的元素，找不到时返回null\n */\nexport function query(selector, context) {\n    if ('string' !== typeof selector) {\n        return selector;\n    }\n\n    context = context || document.body;\n\n    return context.querySelector(selector);\n}\n\n/**\n * 根据选择器选择DOM元素列表\n *\n * @public\n * @param {string} selector 元素的selector\n * @param {HTMLElement=} context 上下文\n * @return {Array} 获取的元素列表，找不到时为空数组\n */\nexport function queryAll(selector, context) {\n    if (Array.isArray(selector)) {\n        return selector;\n    }\n\n    context = context || document.body;\n\n    let nodeList = context.querySelectorAll(selector);\n\n    return Array.prototype.slice.call(nodeList);\n}\n\n/**\n * 判断DOM元素与选择器是否匹配\n *\n * @param {HTMLElement} element 目标DOM元素\n * @param {string} selector 待判断的selector\n * @return {boolean} 是否匹配\n */\nexport function matches(element, selector) {\n    let proto = Element.prototype;\n    let matches = proto.matches\n        || proto.webkitMatchesSelector\n        || proto.mozMatchesSelector\n        || proto.msMatchesSelector;\n\n    if (matches) {\n        return matches.call(element, selector);\n    }\n\n    let elements = exports.queryAll(selector, element.parentNode);\n    for (let i = 0; i < elements.length; i++) {\n        if (elements[i] === element) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n// ****************************************************\n// *                  traversal                       *\n// ****************************************************\n\n/**\n * 获取元素的子节点\n *\n * @public\n * @param {HTMLElement} element 目标元素\n * @return {Array.<HTMLElement>} 子节点\n */\nexport function children(element) {\n    let res = [];\n\n    let items = element.children;\n    for (let i = 0, item; item = items[i]; i++) { // jshint ignore:line\n        if (item.nodeType === 1) {\n            res.push(item);\n        }\n    }\n\n    return res;\n}\n\n/**\n * 查找第一个匹配条件的祖先元素\n *\n * @param {HTMLElement} element 目标元素\n * @param {string} selector 查询条件\n * @param {HTMLElement=} context 遍历范围\n * @return {HTMLElement|null} 匹配到的节点，找不到时返回null\n */\nexport function closest(element, selector, context) {\n    context = context || document;\n\n    do {\n        if (matches(element, selector)) {\n            return element;\n        }\n\n        if (element === context) {\n            return null;\n        }\n    }\n    while ((element = element.parentNode) && element !== document);\n\n    return null;\n}\n"],"file":"dom.js"}