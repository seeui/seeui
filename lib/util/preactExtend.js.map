{"version":3,"names":[],"mappings":"","sources":["util/preactExtend.js"],"sourcesContent":["/**\n * @file preactCompat   摘抄自preact-compat\n * https://github.com/developit/preact-compat\n * @author wuqi03(wuqi03@baidu.com)\n * @time 2017-08-08\n */\n\nimport {h, render as preactRender} from 'preact';\n\n/**\n * 空组件\n *\n * @class\n * @return {Object} 返回空\n */\nfunction EmptyComponent() {\n    return null;\n}\n\n// proxy render() since React returns a Component reference.\nexport function render(vnode, parent, callback) {\n    let prev = parent && parent._preactCompatRendered && parent._preactCompatRendered.base;\n\n    // ignore impossible previous renders\n    if (prev && prev.parentNode !== parent) {\n        prev = null;\n    }\n\n    // default to first Element child\n    if (!prev) {\n        prev = parent.children[0];\n    }\n\n    // remove unaffected siblings\n    for (let i = parent.childNodes.length; i--;) {\n        if (parent.childNodes[i] !== prev) {\n            parent.removeChild(parent.childNodes[i]);\n        }\n    }\n\n    let out = preactRender(vnode, parent, prev);\n\n    if (parent) {\n        parent._preactCompatRendered = out && (out._component || {base: out});\n    }\n\n    if (typeof callback === 'function') {\n        callback();\n    }\n\n    return out && out._component || out;\n}\n\nexport function unmountComponentAtNode(container) {\n    let existing = container._preactCompatRendered && container._preactCompatRendered.base;\n    if (existing && existing.parentNode === container) {\n        preactRender(h(EmptyComponent), container, existing);\n        return true;\n    }\n    return false;\n}\n\n\n"],"file":"preactExtend.js"}