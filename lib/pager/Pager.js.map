{"version":3,"names":[],"mappings":"","sources":["pager/Pager.js"],"sourcesContent":["/**\n * @file Pager\n * @author zhaiwanli\n */\n\nimport {h, Component} from 'preact';\nimport Icon from '../icon/Icon';\nimport classNames from '../util/classnames';\n\n\n/**\n * Pager\n *\n * @extends {preact.Component}\n * @class\n */\nexport default class Pager extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        // 当前页，第一页从0开始\n        page: 1,\n\n        // 起始页码\n        first: 1,\n\n        // 首尾显示的页码个数\n        padding: 1,\n\n        // 是否一直显示分页控件\n        showAlways: false,\n\n        // 当页数较多时，中间显示页码的个数\n        showCount: 5,\n\n        // 总页数\n        total: 0,\n\n        // 是否可用\n        disabled: false,\n\n        // 是否使用文字\n        useLang: false,\n\n        // 上下页显示文字\n        lang: {\n\n            // 上一页显示文字\n            prev: '上一页',\n\n            // 下一页显示文字\n            next: '下一页',\n\n            // 省略号\n            ellipsis: '..'\n        }\n    };\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param {*} props 属性\n     */\n    constructor(props) {\n\n        super(props);\n\n        const page = props.page;\n\n        /**\n         * 状态\n         *\n         * @protected\n         * @type {Object}\n         */\n        this.state = {page};\n\n        this.onMainClick = this.onMainClick.bind(this);\n\n    }\n\n    /**\n     * 接受新属性时的处理\n     *\n     * @public\n     * @override\n     * @param {*} nextProps 新属性\n     */\n    componentWillReceiveProps(nextProps) {\n\n        let {page, total} = nextProps;\n\n        if (page < 0) {\n            page = 0;\n        }\n        else if (page > total) {\n            page = total - 1;\n        }\n\n        if (page !== this.state.page) {\n            this.setState({page});\n        }\n    }\n\n    /**\n     * 生成一个页码数组, 如果需要ellipsis, 那么ellpsis用负数表示它;\n     * 即ellipsis在5号位置, 那么他就是-5\n     * 输入: start 0, stop 10, paddingLeft 3 paddingRight 3\n     * 输出: 0, 1, 2, -3, 8, 9, 10\n     *\n     * @private\n     * @param  {number} start        起始页码\n     * @param  {number} stop         结束页面(不包含)\n     * @param  {number} paddingLeft  起始页码之后, 应展开的页码个数\n     * @param  {number} paddingRight 结束页面之前, 应展开的页码个数\n     * @return {Array<number>}        [start, paddingLeft, .., paddingRight, stop]\n     */\n    range(start, stop, paddingLeft, paddingRight) {\n        return start + paddingLeft < stop - paddingRight\n            ? [\n                ...this.rangeArray(start, start + paddingLeft),\n                -start - paddingLeft,\n                ...this.rangeArray(stop - paddingRight, stop)\n            ]\n            : this.rangeArray(start, stop);\n    }\n\n    rangeArray(start, stop, step = 1) {\n        /* eslint-disable prefer-rest-params */\n        if (arguments.length <= 1) {\n            stop = start || 0;\n            start = 0;\n        }\n\n        step = step || 1;\n\n        const length = Math.max(Math.ceil((stop - start) / step), 0);\n        const range = Array(length);\n\n        for (let idx = 0; idx < length; idx++, start += step) {\n            range[idx] = start;\n        }\n\n        return range;\n    }\n\n    /**\n     * 渲染页码\n     *\n     * @protected\n     * @param {Object} conf 页码的属性\n     * @return {ReactElement}\n     */\n    renderItem(conf) {\n\n        const {page, part, states} = conf;\n        const {prefixCls, lang, useLang} = this.props;\n\n        let pageText;\n\n        if (!useLang && part && part !== 'ellipsis') {\n            pageText = (part === 'prev' ? <Icon type=\"back\" /> : <Icon type=\"right\" />);\n        }\n        else {\n            pageText = lang[part] || page + 1;\n        }\n\n        return (\n            <li\n                className={classNames({\n                    [`${prefixCls}-pager-item`]: true,\n                    'state-prev': states.prev,\n                    'state-disabled': states.disabled,\n                    'state-current': states.current,\n                    'state-next': states.next,\n                    'state-ellipsis': states.ellipsis\n                })}\n                key={part + page}\n                data-role=\"pager-item\"\n                data-page={page}>\n                {pageText}\n            </li>\n        );\n    }\n\n    /**\n     * 鼠标点击时的处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onMainClick(e) {\n\n        e.preventDefault();\n\n        const target = e.target;\n\n        const tar = target.getAttribute('data-role')\n            ? target\n            : target.parentNode.getAttribute('data-role')\n                ? target.parentNode\n                : '';\n\n        if (!tar) {\n            return;\n        }\n\n        const {first, onChange} = this.props;\n\n        const page = +tar.getAttribute('data-page') + first;\n\n        if (this.state.page === page) {\n            return;\n        }\n\n        this.setState({page});\n\n        // 被控制的\n        if (onChange) {\n            onChange({\n                target: this,\n                page: page\n            });\n            return;\n        }\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n\n    render() {\n        const {prefixCls, total, first, padding, showCount, showAlways, className, ...others} = this.props;\n        let page = this.state.page;\n        let showCountNew = showCount > total ? total : showCount;\n\n        page = page - first;\n\n        if (!showAlways && total <= 1) {\n            return (\n                <ul className=\"c-pager\" />\n            );\n        }\n\n        const wing = Math.floor(showCountNew / 2);\n\n        const paddingLeft = padding;\n        const paddingRight = padding;\n        const reduceLeftToRight = page - wing;\n\n        let wingLeft = wing;\n        let wingRight = wing;\n\n        // 如果wingLeft小于0, 那么把小于0的部分移动到wingRight\n        if (reduceLeftToRight < 0) {\n            wingLeft += reduceLeftToRight;\n            wingRight -= reduceLeftToRight;\n        }\n\n        const reduceRightToLeft = page + wing + 1 - total;\n\n        // 如果wingRight大于total, 那么把超长的部分移动到wingLeft\n        if (reduceRightToLeft > 0) {\n            wingLeft += reduceRightToLeft;\n            wingRight -= reduceRightToLeft;\n        }\n\n        // 生成左半端页码\n        const left = this.range(0, page, paddingLeft, wingLeft);\n        // 生成右半端页码\n        const right = this.range(page + 1, total, wingRight, paddingRight);\n        // 全部页码\n        const full = [\n            {\n                page: Math.max(page - 1, 0),\n                states: {\n                    prev: true,\n                    disabled: page === 0\n                },\n                part: 'prev'\n            },\n            ...left,\n            {\n                page: page,\n                states: {\n                    current: true\n                },\n                part: ''\n            },\n            ...right,\n            {\n                page: Math.min(page + 1, total - 1),\n                states: {\n                    next: true,\n                    disabled: page >= total - 1\n                },\n                part: 'next'\n            }\n        ];\n\n        const result = full.map(conf => {\n\n            if (typeof conf === 'number') {\n                const part = conf >= 0 ? '' : 'ellipsis';\n                conf = {\n                    page: Math.abs(conf),\n                    states: {\n                        ellipsis: !!part\n                    },\n                    part\n                };\n            }\n\n            return this.renderItem(conf);\n\n        });\n\n        let cls = classNames({\n            [`${prefixCls}-pager`]: true,\n            [className]: className\n        });\n\n        return (\n            <ul className={cls} onClick={this.onMainClick} {...others}>\n                {result}\n            </ul>\n        );\n    }\n}\n"],"file":"Pager.js"}